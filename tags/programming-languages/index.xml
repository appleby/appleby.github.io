<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming Languages on app.leby.org</title>
    <link>https://app.leby.org/tags/programming-languages/</link>
    <description>Recent content in Programming Languages on app.leby.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Sep 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://app.leby.org/tags/programming-languages/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Lisp In Small Pieces</title>
      <link>https://app.leby.org/notes/lisp/</link>
      <pubDate>Fri, 19 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://app.leby.org/notes/lisp/</guid>
      <description>Ch. 1 The Basics of Interpretation &amp;sect; 1.3 Evaluating Atoms Syntactic vs. Semantic Elements (define (evaluate expr env) (if (and (atom? expr) (symbol? expr)) (lookup expr env) ...  To be more precise, we could instead write:
(lookup (symbol-&amp;gt;variable expr) env)  and likewise, taking the abstraction one step further:
(lookup (variable-&amp;gt;key (symbol-&amp;gt;variable expr)) env)  However, when writing a meta-circular evaluator we normally rely on the fact that we can represent the concept of a &amp;ldquo;variable&amp;rdquo; in our source language and &amp;ldquo;key&amp;rdquo; in our defining language both as ordinary lisp symbols.</description>
    </item>
    
    <item>
      <title>Hints on Programming Language Design</title>
      <link>https://app.leby.org/notes/hoare-hints/</link>
      <pubDate>Wed, 25 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://app.leby.org/notes/hoare-hints/</guid>
      <description>Overview This page contains notes on a paper by C.A.R. Hoare titled, &amp;ldquo;Hints on Programming Language Design.&amp;rdquo; Here is a summary of the major points that jumped out at me.
Hoare is for:
 Languages that aid the programmer in design, documentation, and debugging Small, simple designs Static analysis and typing Safety (bounds checking, etc.) Fast compilation and efficient code Readability Dumpable images A superb comment convention! Mutable state (for efficiency) Type extensions + operator overloading Consolidating best of existing features when designing a new language  Hoare is against:</description>
    </item>
    
    <item>
      <title>Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part 1</title>
      <link>https://app.leby.org/notes/recursive/</link>
      <pubDate>Wed, 14 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://app.leby.org/notes/recursive/</guid>
      <description>&amp;sect; 2 Functions and Function Definitions Introduces the notion of a conditional expression!
Tidbit: McCarthy proposed the addition of a cond-like expression to Algol 60, but it was rejected in favor of the English equivalent, if ... then ... else.
Review of concepts:
 a. Partial Function a function that is only defined on part of it&amp;rsquo;s domain. b. Propositional Expressions and Predicates $T, F, \wedge, \lor, \lnot, etc.$ c.</description>
    </item>
    
  </channel>
</rss>